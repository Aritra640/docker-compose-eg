// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (username , email , password_hashed)
VALUES ($1 , $2 , $3)
RETURNING id, username, email , password_hashed , created_at
`

type AddUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	PasswordHashed string `json:"password_hashed"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Username, arg.Email, arg.PasswordHashed)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hashed, created_at
FROM users 
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
	)
	return i, err
}
